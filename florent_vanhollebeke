## 2. Deuxième étape

Une fois que c'est fait 

1. B clone le repository puis modifie le fichier créé par A. 
2. B commit et push 


### 3. Génération d'un conflit

1. Pendant ce temps A modifie le fichier qu'il a créé, le commit (**sans le push**). 
2. Une fois que B a bien fait son push, A tente de push et devrait avoir une erreur. 
3. A suit les indications de l'erreur et un conflit devrait être apparu ! 


### 4. Résolution d'un conflit

Quand un même ficher est modifié par deux personnes différents, git ne sait pas (sauf dans certains cas) quelles modifications garder. 

1. A ouvre le fichier ayant le conflit. Discuter à deux quelle modification garder
2. A modifie le fichier en conséquence
3. A add le fichier modifié au staging, le commit 
4. A peut désormais pusher

Vous pouvez si vous le souhaitez refaire les étapes en inversant les rôles.


## Exercice 3:


### 1. Retour sur les branches

Dans le premier exercice on a vu les branches : vous avez créé une branche et fait des modifications dessus. 

1. Retourner dans le repository où vous avez créé la branche. Lister les fichiers avec dir ou ls
2. Avec la commande git checkout retournez la branche master et vérifier que le fichier que vous aviez ajouter sur votre branche n'existe plus

### 2. L'étape merge

En général on crée des branches pour ne pas faire de modification directement sur la branche master qui est utilisée pour les déploiement

Mais quand on est content d'une modification effectuée sur une branche on veut la fusionner dans master. 

1. Se mettre dans la branche master
2. Fusionner la branche où vous aviez fait les modifications dans master à l'aide de git merge
3. Vérifier que les modifications sont bien intégrées dans master
4. Push vers le repository distant
5. Lire [cette doc](https://git-scm.com/book/fr/v1/Les-branches-avec-Git-Rebaser)



## Exercice 4: merge et fetch

Dans cet exercice on va voir la différence entre fetch et pull.

Mettez vous encore à deux comme l'exercice précédent.

1. A créé une branche nommée "test_fetch"